colnames(metacyc_abundance)<-gsub("X2D10", "2D10",colnames(metacyc_abundance))
colnames(metacyc_abundance)<-gsub("X2D14", "2D14",colnames(metacyc_abundance))
View(metacyc_abundance)
metacyc.foo<-metacyc_abundance[rowSums(metacyc_abundance[,-1] == 0) <= 3, ]
metacyc.foo
metacyc.foo%>%
# column_to_rownames("function")%>%
pivot_longer(!pathway,names_to = "Sample",values_to = "abundance")
metacyc.foo%>%
# column_to_rownames("function")%>%
pivot_longer(!pathway,names_to = "Sample",values_to = "abundance")%>%
group_by(pathway)%>%
mutate(abundance=as.numeric(abundance))%>%
mutate(mean.abundance=mean(abundance))
metacyc.foo%>%
# column_to_rownames("function")%>%
pivot_longer(!pathway,names_to = "Sample",values_to = "abundance")%>%
group_by(pathway)%>%
mutate(abundance=as.numeric(abundance))%>%
mutate(mean.abundance=mean(abundance))%>%
mutate(var.abundance=var(abundance))
metacyc.foo%>%
# column_to_rownames("function")%>%
pivot_longer(!pathway,names_to = "Sample",values_to = "abundance")%>%
group_by(pathway)%>%
mutate(abundance=as.numeric(abundance))%>%
mutate(mean.abundance=mean(abundance))%>%
mutate(var.abundance=var(abundance))%>%
select(pathway,mean.abundance,var.abundance)%>%
distinct()%>%
# filter(mean.abundance>1000,var.abundance>100)%>%
mutate(mean.int=mean.abundance %/% 1000 +1)%>%
mutate(var.int=var.abundance %/% 1000 +1)%>%
arrange(desc(mean.int),var.int)%>%View()
metacyc.foo%>%
pivot_longer(!pathway,names_to = "Sample",values_to = "abundance")%>%
# filter(predicted.function=="K03088")%>%
select(-pathway)%>%
ggplot(aes(x=Sample,y=abundance))+
geom_boxplot()
# Load MetaCyc pathway abundance and metadata
metadata <- read.table(paste0("./data/alldir-data/","filenames-single-pooled-raw-supercomp.tsv"),
header = T)
metadata<-metadata%>%
filter(class=="NMR"|class=="FukomysDamarensis")
ko_abundance %>%column_to_rownames(predicted.function)
ko_abundance %>%column_to_rownames("predicted.function")
BiocManager::install("biomaRt")
library(biomaRt)
mart <- useMart("ensembl")
listMarts()
listDatasets(mart)
View(listDatasets(mart))
mart <- useDataset("hgfemale_gene_ensembl", mart)
enzymes <- getBM(attributes = c("ec_number", "description"),
filters = "ec_number",
values = "3.2.1%",
mart = mart)
listAttributes()
listAttributes(mart)
listAttributes(mart)%>%View()
View(ko_abundance)
enzymes <- getBM(attributes = c("ec_number", "description"),
filters = "ec_number",
values = "EC:1.1.1.1",
mart = mart)
enzymes <-  getBM(attributes = c("external_gene_name", "description"),
filters = "ec_number",
values = "3.2.1%",
mart = mart)
listAttributes(mart)%>%View()
enzymes <-  getBM(attributes = c("external_gene_name", "description"), filters = "go_term", values = "GO:0005975", mart = mart)
enzymes <-  getBM(attributes = c("external_gene_name", "description"), filters = "go_id", values = "GO:0005975", mart = mart)
enzymes <-  getBM(attributes = c("go_id", "description"),
values = "GO:0005975", mart = mart)
View(enzymes)
# Load MetaCyc pathway abundance and metadata
metadata <- read.table(paste0("./data/alldir-data/","filenames-single-pooled-raw-supercomp.tsv"),
header = T)
metadata<-metadata%>%
filter(class=="NMR"|class=="FukomysDamarensis")
metacyc_abundance<-read.table("./data/alldir-data/picrust/supercomp/NMR_FD/path_abun_unstrat.tsv",
header = T,sep="\t")
colnames(metacyc_abundance)<-gsub("X2D10", "2D10",colnames(metacyc_abundance))
colnames(metacyc_abundance)<-gsub("X2D14", "2D14",colnames(metacyc_abundance))
# Perform pathway DAA using LinDA method
# Please change column_to_rownames() to the feature column if you are not using example dataset
# Please change group to "your_group_column" if you are not using example dataset
metacyc_daa_results_df <- pathway_daa(abundance = metacyc_abundance %>% column_to_rownames("pathway"),
metadata = metadata,
group = "class",
daa_method = "LinDA")
library(ggpicrust2)
library(readr)
library(ggpicrust2)
library(tibble)
library(tidyverse)
library(ggprism)
library(patchwork)
# Perform pathway DAA using LinDA method
# Please change column_to_rownames() to the feature column if you are not using example dataset
# Please change group to "your_group_column" if you are not using example dataset
metacyc_daa_results_df <- pathway_daa(abundance = metacyc_abundance %>% column_to_rownames("pathway"),
metadata = metadata,
group = "class",
daa_method = "LinDA")
View(metacyc_daa_results_df)
# Annotate MetaCyc pathway results without KO to KEGG conversion
metacyc_daa_annotated_results_df <- pathway_annotation(pathway = "MetaCyc",
daa_results_df = metacyc_daa_results_df,
ko_to_kegg = FALSE)
View(metacyc_daa_annotated_results_df)
metacyc_daa_annotated_results_df<-metacyc_daa_annotated_results_df%>%
filter(p_adjust<0.05)%>%
slice(1:25)
# Generate pathway error bar plot
# Please change column_to_rownames() to the feature column
# Please change Group to metadata$your_group_column if you are not using example dataset
pathway_errorbar(abundance = metacyc_abundance %>% column_to_rownames("pathway"),
daa_results_df = metacyc_daa_annotated_results_df,
Group = metadata$class,
ko_to_kegg = FALSE,
p_values_threshold = 0.05,
order = "group",
select = NULL,
p_value_bar = TRUE,
colors = NULL,
x_lab = "description")
# Generate pathway heatmap
# Please change column_to_rownames() to the feature column if you are not using example dataset
# Please change group to "your_group_column" if you are not using example dataset
feature_with_p_0.05 <- metacyc_daa_results_df %>% filter(p_adjust < 0.05)
pathway_heatmap(abundance = metacyc_abundance %>%
filter(pathway %in% feature_with_p_0.05$feature) %>%
column_to_rownames("pathway"),
metadata = metadata,
group = "class")
library(ggh4x)
pathway_heatmap(abundance = metacyc_abundance %>%
filter(pathway %in% feature_with_p_0.05$feature) %>%
column_to_rownames("pathway"),
metadata = metadata,
group = "class")
# Generate pathway error bar plot
# Please change column_to_rownames() to the feature column
# Please change Group to metadata$your_group_column if you are not using example dataset
pathway_errorbar(abundance = metacyc_abundance %>% column_to_rownames("pathway"),
daa_results_df = metacyc_daa_annotated_results_df,
Group = metadata$class,
ko_to_kegg = FALSE,
p_values_threshold = 0.05,
order = "group",
select = NULL,
p_value_bar = TRUE,
colors = NULL,
x_lab = "description")
# Generate pathway PCA plot
# Please change column_to_rownames() to the feature column if you are not using example dataset
# Please change group to "your_group_column" if you are not using example dataset
pathway_pca(abundance = metacyc_abundance %>%
column_to_rownames("pathway"),
metadata = metadata,
group = "class")
library(vegan)
library(tidyverse)
library(phyloseq)
authorname<-"merged"
truncationlvl<-"234"
agglom.rank<-"Genus"
read.end.type<-"single"
rare.status<-"rare"
filter.status<-"nonfiltered"
authorname<-"pooled"
filter.status<-"nonfiltered"
load(paste0("./rdafiles/",paste(authorname,read.end.type,"qiime2",
truncationlvl,agglom.rank,
"phyloseq-workspace.RData",sep = "-")))
load(paste0("./output/rdafiles/",paste(authorname,read.end.type,"qiime2",
truncationlvl,agglom.rank,
"phyloseq-workspace.RData",sep = "-")))
pretty.facet.labels<-
c("NMR" = "*Heterocephalus glaber*", # better labels for facets
"B6mouse" = "B6 mouse",
"MSMmouse" = "MSM/Ms mouse",
"FVBNmouse" = "FVB/N mouse",
"DMR" = "*Fukomys Damarensis*",
"hare" = "*Lepus europaeus*",
"rabbit" = "*Oryctolagus cuniculus*",
"spalax" = "*Nannospalax leucodon*",
"pvo" = "*Pteromys volans orii*",
"NMRwt"="Wild *Heterocephalus glaber*"
)
custom.levels<-intersect(names(pretty.facet.labels),custom.md$class)
pretty.facet.labels<-
c("NMR" = "*Heterocephalus glaber*", # better labels for facets
"B6mouse" = "B6 mouse",
"MSMmouse" = "MSM/Ms mouse",
"FVBNmouse" = "FVB/N mouse",
"DMR" = "*Fukomys Damarensis*",
"hare" = "*Lepus europaeus*",
"rabbit" = "*Oryctolagus cuniculus*",
"spalax" = "*Nannospalax leucodon*",
"pvo" = "*Pteromys volans orii*"
)
custom.levels<-intersect(names(pretty.facet.labels),custom.md$class)
# Create custom palette with Polychrome package
set.seed(1)
custom.colors<-
createPalette(length(custom.levels),
seedcolors = c("#B22222", "#0000FF","#006400",
"#FF8C00","#5D478B", "#00FFFF"))
library(Polychrome)
# Create custom palette with Polychrome package
set.seed(1)
custom.colors<-
createPalette(length(custom.levels),
seedcolors = c("#B22222", "#0000FF","#006400",
"#FF8C00","#5D478B", "#00FFFF"))
# custom.colors<-unname(custom.colors)
names(custom.colors)<-custom.levels
swatch(custom.colors)
# filter your data
if(exists("excluded.samples")){
custom.levels<-custom.levels[!custom.levels%in%excluded.samples]
pretty.facet.labels<-pretty.facet.labels[which(names(pretty.facet.labels)%in%custom.levels)]
pretty.facet.labels<-pretty.facet.labels[!names(pretty.facet.labels)%in%excluded.samples]
ps.q.agg<-ps.q.agg%>%
filter(class%in%custom.levels,!class%in%excluded.samples,Abundance!=0)
}else {
pretty.facet.labels<-pretty.facet.labels[which(names(pretty.facet.labels)%in%custom.levels)]
ps.q.agg<-ps.q.agg%>%
filter(class%in%custom.levels,Abundance!=0)
}
# custom labels for scale_color_manual
custom.color.labels<-unname(pretty.facet.labels)
if(exists("excluded.samples")){
custom.colors<-custom.colors[!names(custom.colors)%in%excluded.samples]
}
ps.sampledata<-ps.q.agg%>%
select(c("Sample","class","sex","birthday"))%>%
distinct() # metadata
ps.q.df <-ps.q.agg%>%
# filter(Taxon.bp!="Remainder (Mean abundance < 1%)")%>%
select(Sample,OTU,Abundance,class,Taxon)
# Beta diversity ####
# find the smallest sample size
min.n_seqs.all<-ps.q.df%>%
select(Sample,OTU,Abundance)%>%
group_by(Sample)%>%
summarize(n_seqs=sum(Abundance))%>%
summarize(min=min(n_seqs))%>%
pull(min)
# convert the data frame into wide format
if(agglom.rank=="OTU"){
# convert the data frame into wide format
ps.q.df.wide<-ps.q.df%>%
select(-Taxon)%>%
pivot_wider(names_from = "OTU", # or OTU
values_from = "Abundance",
values_fill = 0)%>%
as.data.frame()
}else{
ps.q.df.wide<-ps.q.df%>%
select(-OTU)%>%
pivot_wider(names_from = "Taxon", # or OTU
values_from = "Abundance",
values_fill = 0)%>%
as.data.frame()
}
# colnames are OTUs and rownames are sample IDs
rownames(ps.q.df.wide)<-ps.q.df.wide$Sample
ps.q.df.wide<-ps.q.df.wide[,-c(1,2)]
ps.q.df.wide<-as.matrix(ps.q.df.wide)
# rclr
class(ps.q.df.wide)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr")
View(ps.q.df.wide.rclr)
View(ps.q.df.wide)
ps.q.df.wide[1,]
ps.q.df.wide[1,]>0
ps.q.df.wide[1,][ps.q.df.wide[1,]>0]
prod(ps.q.df.wide[1,][ps.q.df.wide[1,]>0])
log(ps.q.df.wide[1,]/prod(ps.q.df.wide[1,][ps.q.df.wide[1,]>0]))
log(ps.q.df.wide[1,][ps.q.df.wide[1,]!=0]/prod(ps.q.df.wide[1,][ps.q.df.wide[1,]>0]))
log(if(ps.q.df.wide[1,]!=0,ps.q.df.wide[1,],0)/prod(ps.q.df.wide[1,][ps.q.df.wide[1,]>0]))
vec<-ps.q.df.wide[1,]
vec/prod(vec)
rclr<-(log(vec/prod(vec)))
rclr
rm(rclr)
replace(rclr.vec,rclr.vec==NaN,0)
rclr.vec<-(log(vec/prod(vec)))
replace(rclr.vec,rclr.vec==NaN,0)
replace(rclr.vec,is.nan(rclr.vec),0)
final.rclr<-replace(rclr.vec,is.nan(rclr.vec),0)
table(final.rclr==ps.q.df.wide.rclr[1,])
which(final.rclr!=ps.q.df.wide.rclr[1,])
final.rclr[which(final.rclr!=ps.q.df.wide.rclr[1,])]
nonzero.vec<-vec[which(vec)!=0]
which(vec)!=0
nonzero.vec<-vec[which(vec!=0)]
vec<-ps.q.df.wide[1,]
log.vec<-log(nonzero.vec/prod(nonzero.vec))
nonzero.vec<-vec[which(vec>0)]
log.vec<-log(nonzero.vec/prod(nonzero.vec))
head(log.vec)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",MARGIN = 1)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",MARGIN = 2)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr")
prod(nonzero.vec)
nonzero.vec/prod(nonzero.vec)
zero.vec<-vec[which(vec<=0)]
c(log.vec,zero.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.vec[match(vec)]
sort(rclr.vec)
sort(names(rclr.vec))
rclr.vec[sort(names(rclr.vec))]
vec[sort(names(vec))]
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
rbind(rclr.sorted,orig.sorted)
data.frame(orig.sorted,rclr.sorted)
df<-data.frame(orig.sorted,rclr.sorted)
View(df)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
table(decostand.sorted==orig.sorted)
df<-data.frame(decostand.sorted,rclr.sorted)
View(df)
log.vec<-log2(nonzero.vec/prod(nonzero.vec))
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
df<-data.frame(decostand.sorted,rclr.sorted)
log.vec<-log2(nonzero.vec/exp(mean(log((nonzero.vec)))))
head(log.vec)
log.vec<-log2(nonzero.vec/exp(mean(log2((nonzero.vec)))))
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
df<-data.frame(decostand.sorted,rclr.sorted)
geom.mean<-exp(mean(log(nonzero.vec)))
geom.mean<-exp(mean(log2(nonzero.vec)))
log.vec<-log2(nonzero.vec/geom.mean)
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
table(rclr.sorted==orig.sorted)
df<-data.frame(decostand.sorted,rclr.sorted)
df%>%mutate(difference=decostand.sorted-rclr.sorted)
df<-df%>%mutate(difference=decostand.sorted-rclr.sorted)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",logbase = 10)
geom.mean<-exp(mean(log10(nonzero.vec)))
log.vec<-log10(nonzero.vec/geom.mean)
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
df<-data.frame(decostand.sorted,rclr.sorted)
df<-df%>%mutate(difference=decostand.sorted-rclr.sorted)
geom.mean<-(prod(nonzero.vec))**(1/length(nonzero.vec))
log.vec<-log10(nonzero.vec/geom.mean)
head(log.vec)
ln(1)
log(2.71)
geom.mean<-exp(mean(log(nonzero.vec)))
log.vec<-log10(nonzero.vec/geom.mean)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",logbase = 10)
vec<-ps.q.df.wide[1,]
nonzero.vec<-vec[which(vec>0)]
zero.vec<-vec[which(vec<=0)]
geom.mean<-exp(mean(log(nonzero.vec)))
log.vec<-log10(nonzero.vec/geom.mean)
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
df<-data.frame(decostand.sorted,rclr.sorted)
df<-df%>%mutate(difference=decostand.sorted-rclr.sorted)
log(nonzero.vec)
mean(log(nonzero.vec))
exp
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",logbase=exp)
ps.q.df.wide.rclr[1,1]
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",logbase=exp)
vec<-ps.q.df.wide[1,]
nonzero.vec<-vec[which(vec>0)]
zero.vec<-vec[which(vec<=0)]
geom.mean<-exp(mean(log(nonzero.vec)))
log.vec<-log(nonzero.vec/geom.mean)
# rclr
ps.q.df.wide.rclr<-decostand(ps.q.df.wide,method="rclr",logbase=exp)
vec<-ps.q.df.wide[1,]
nonzero.vec<-vec[which(vec>0)]
zero.vec<-vec[which(vec<=0)]
geom.mean<-exp(mean(log(nonzero.vec)))
log.vec<-log(nonzero.vec/geom.mean)
head(log.vec)
rclr.vec<-c(log.vec,zero.vec)
rclr.vec
rclr.sorted<-rclr.vec[sort(names(rclr.vec))]
orig.sorted<-vec[sort(names(vec))]
table(rclr.sorted==orig.sorted)
decostand.vec<-ps.q.df.wide.rclr[1,]
decostand.sorted<-decostand.vec[sort(names(decostand.vec))]
df<-data.frame(decostand.sorted,rclr.sorted)
df<-df%>%mutate(difference=decostand.sorted-rclr.sorted)
sum(df$difference)
df<-df%>%mutate(difference=round(decostand.sorted-rclr.sorted,2))
sum(df$difference)
# PCA ####
# import rarefied dataframe
ps.q.df.pca.input<-read.table(paste0("./rtables/",authorname,"/ps.q.df.",
rare.status,".",filter.status,"-",agglom.rank,"-",
paste(custom.levels,collapse = '-'),".tsv"),
header = T)
# PCA ####
# import rarefied dataframe
ps.q.df.pca.input<-read.table(paste0("./output/rtables/",authorname,"/ps.q.df.",
rare.status,".",filter.status,"-",agglom.rank,"-",
paste(custom.levels,collapse = '-'),".tsv"),
header = T)
# Convert into wide format
if(agglom.rank=="OTU"){
ps.q.df.wide<-ps.q.df.pca.input%>%
select(-class,-sex,-birthday)%>%
pivot_wider(names_from = "OTU", # or OTU
values_from = "Abundance",
values_fill = 0)%>%
as.data.frame()
}else{
ps.q.df.wide<-ps.q.df.pca.input%>%
select(-class,-sex,-birthday)%>%
pivot_wider(names_from = "Taxon", # or OTU
values_from = "Abundance",
values_fill = 0)%>%
as.data.frame()
}
# colnames are OTUs and rownames are sample IDs
rownames(ps.q.df.wide)<-ps.q.df.wide$Sample
ps.q.df.wide<-ps.q.df.wide[,-1] # prune after this command
ps.q.df.wide<-as.matrix(ps.q.df.wide)
ps.q.df.wide.centered<-scale(ps.q.df.wide,scale=F,center=T)
ps.q.df.wide<-decostand(ps.q.df.wide,method="rclr",logbase = exp)
ps.q.df.wide.centered<-scale(ps.q.df.wide,scale=F,center=T)
ps.q.df.wide.centered.scaled<-scale(ps.q.df.wide.centered,scale=T,center=F)
# calculate principal components
pca.q<-prcomp(ps.q.df.wide.centered.scaled)
str(pca.q)
dim(pca.q$x)
# reverse the signs
pca.q$rotation<- -1*pca.q$rotation
# display principal components (loadings)
head(pca.q$rotation)
# reverse th signs of the scores
pca.q$x<- -1*pca.q$x
# display the first six scores
head(pca.q$x)
## PCA Plot ####
PC1<-pca.q$x[,1]
PC2<-pca.q$x[,2]
perc.var<-round(100*summary(pca.q)$importance[2,1:2],2)
ggplot(ps.sampledata[ps.sampledata$Sample%in%
rownames(ps.q.df.wide.centered.scaled),],
aes(x=PC1,y=PC2,color=class,fill=class)) +
geom_point(size=2)+
stat_ellipse(geom = "polygon",
level = 0.8,
alpha=0.2,
show.legend = FALSE)+
labs(x=paste0("PC1 (", perc.var[1], "%)"),
y=paste0("PC2 (", perc.var[2], "%)"),
color="Host")+
theme_bw()+
ggtitle(paste("PCA between different rodents (",agglom.rank, " level)"))+
scale_color_manual(breaks = custom.levels,
labels=custom.color.labels,
values = custom.colors)+
scale_fill_manual(name=NULL, breaks = custom.levels,
labels=custom.levels,
values = custom.colors)+
guides(fill="none")
